# Release Automation Workflow for photon-mlir-bridge
# This file should be placed at: .github/workflows/release.yml

name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Semantic version tags (v1.0.0, v2.1.3, etc.)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  CMAKE_BUILD_TYPE: Release

permissions:
  contents: write
  packages: write
  id-token: write  # For OIDC token generation

jobs:
  # Validate release conditions
  validate-release:
    name: Validate Release
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            # Extract from tag
            VERSION=${GITHUB_REF#refs/tags/v}
            # Check if it's a prerelease (contains alpha, beta, rc)
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE=true
            else
              IS_PRERELEASE=false
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION (prerelease: $IS_PRERELEASE)"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-prerelease"
            exit 1
          fi

      - name: Check if tag exists (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.version.outputs.version }} already exists"
            exit 1
          fi

  # Build Python packages
  build-python:
    name: Build Python Packages
    runs-on: ${{ matrix.os }}
    needs: validate-release
    timeout-minutes: 45
    
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13, windows-2022]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Platform-specific MLIR/LLVM installation
      - name: Install MLIR/LLVM (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main" | sudo tee /etc/apt/sources.list.d/llvm.list
          sudo apt-get update
          sudo apt-get install -y llvm-17-dev mlir-17-tools libmlir-17-dev clang-17

      - name: Install MLIR/LLVM (macOS)
        if: matrix.os == 'macos-13'
        run: |
          brew install llvm@17
          echo "/opt/homebrew/opt/llvm@17/bin" >> $GITHUB_PATH
          echo "LLVM_DIR=/opt/homebrew/opt/llvm@17/lib/cmake/llvm" >> $GITHUB_ENV
          echo "MLIR_DIR=/opt/homebrew/opt/llvm@17/lib/cmake/mlir" >> $GITHUB_ENV

      - name: Install MLIR/LLVM (Windows)
        if: matrix.os == 'windows-2022'
        run: |
          Invoke-WebRequest -Uri "https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.6/LLVM-17.0.6-win64.exe" -OutFile "llvm-installer.exe"
          Start-Process -FilePath "llvm-installer.exe" -ArgumentList "/S" -Wait
          echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install build cibuildwheel

      # Build C++ components first
      - name: Build C++ components
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
            -DPHOTON_ENABLE_PYTHON=ON \
            -DPHOTON_ENABLE_TESTS=OFF
          cmake --build . --parallel $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)

      # Build wheels using cibuildwheel
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.2
        env:
          CIBW_SKIP: pp*  # Skip PyPy builds
          CIBW_BUILD: cp39-* cp310-* cp311-* cp312-*
          CIBW_ARCHS_LINUX: x86_64
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_ARCHS_WINDOWS: AMD64
          CIBW_BEFORE_BUILD: pip install cmake pybind11
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {project}/tests/unit/python -v

      # Build source distribution (only on Linux)
      - name: Build source distribution
        if: matrix.os == 'ubuntu-22.04'
        run: python -m build --sdist

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}
          path: |
            wheelhouse/*.whl
            dist/*.tar.gz

  # Build and push Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-22.04
    needs: validate-release
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}},value=v${{ needs.validate-release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: runtime
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate-release.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

  # Generate SBOM and sign artifacts
  provenance:
    name: Generate Provenance
    runs-on: ubuntu-22.04
    needs: [validate-release, build-python, build-docker]
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Install syft for SBOM generation
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM
        run: |
          # Generate SBOM for source code
          syft . -o spdx-json=photon-mlir-bridge-${{ needs.validate-release.outputs.version }}-sbom.spdx.json
          
          # Generate SBOM for Docker image
          syft ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }} \
            -o spdx-json=photon-mlir-bridge-${{ needs.validate-release.outputs.version }}-docker-sbom.spdx.json

      - name: Sign artifacts with cosign
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          # Sign Docker images
          cosign sign --yes ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}
          
          # Sign SBOMs
          cosign sign-blob --yes photon-mlir-bridge-${{ needs.validate-release.outputs.version }}-sbom.spdx.json \
            --output-signature photon-mlir-bridge-${{ needs.validate-release.outputs.version }}-sbom.spdx.json.sig
          
          cosign sign-blob --yes photon-mlir-bridge-${{ needs.validate-release.outputs.version }}-docker-sbom.spdx.json \
            --output-signature photon-mlir-bridge-${{ needs.validate-release.outputs.version }}-docker-sbom.spdx.json.sig

      - name: Upload provenance artifacts
        uses: actions/upload-artifact@v3
        with:
          name: provenance
          path: |
            *.spdx.json
            *.sig

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-22.04
    needs: [validate-release, build-python, build-docker, provenance]
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Collect wheels from all platforms
          find release-artifacts -name "*.whl" -exec cp {} release-assets/ \;
          find release-artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
          
          # Copy SBOM and signatures
          cp release-artifacts/provenance/* release-assets/
          
          # Create checksums
          cd release-assets
          sha256sum * > checksums.txt

      - name: Generate release notes
        run: |
          # Extract changelog for this version
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Try to extract from CHANGELOG.md if it exists
          if [[ -f CHANGELOG.md ]]; then
            awk "/^## \[?${VERSION}\]?/,/^## \[?[0-9]/" CHANGELOG.md | head -n -1 | tail -n +2 > release-notes.md
          fi
          
          # If no changelog entry, generate from commits
          if [[ ! -s release-notes.md ]]; then
            echo "## What's Changed" > release-notes.md
            echo "" >> release-notes.md
            
            # Get commits since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [[ -n "$LAST_TAG" ]]; then
              git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges >> release-notes.md
            else
              echo "- Initial release" >> release-notes.md
            fi
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: Release v${{ needs.validate-release.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
          files: release-assets/*
          generate_release_notes: true

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-22.04
    needs: [validate-release, create-release]
    timeout-minutes: 15
    environment: 
      name: pypi
      url: https://pypi.org/project/photon-mlir/
    
    steps:
      - name: Download Python artifacts
        uses: actions/download-artifact@v3
        with:
          pattern: wheels-*
          path: dist/
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          print-hash: true

  # Post-release actions
  post-release:
    name: Post-Release Actions
    runs-on: ubuntu-22.04
    needs: [validate-release, create-release, publish-pypi]
    if: always() && needs.create-release.result == 'success'
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update version for development
        if: needs.validate-release.outputs.is_prerelease == 'false'
        run: |
          # Bump to next development version
          VERSION="${{ needs.validate-release.outputs.version }}"
          IFS='.' read -r major minor patch <<< "$VERSION"
          NEXT_VERSION="$major.$((minor + 1)).0"
          
          # Update version in pyproject.toml
          sed -i "s/version = \"$VERSION\"/version = \"$NEXT_VERSION-dev\"/" pyproject.toml
          
          # Commit version bump
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml
          git commit -m "chore: bump version to $NEXT_VERSION-dev [skip ci]"
          git push origin main

      - name: Create discussion
        uses: actions/github-script@v6
        with:
          script: |
            const version = "${{ needs.validate-release.outputs.version }}";
            const isPrerelease = ${{ needs.validate-release.outputs.is_prerelease }};
            
            const title = `Release v${version} Discussion`;
            const body = `
            🎉 **Release v${version} is now available!**
            
            ${isPrerelease ? '⚠️ This is a pre-release version.' : ''}
            
            ## Installation
            
            \`\`\`bash
            pip install photon-mlir==${version}
            \`\`\`
            
            ## Docker
            
            \`\`\`bash
            docker pull ghcr.io/${{ github.repository }}:${version}
            \`\`\`
            
            ## What's Next?
            
            Please try out the new version and let us know if you encounter any issues!
            
            ## Links
            - [Release Notes](https://github.com/${{ github.repository }}/releases/tag/v${version})
            - [PyPI Package](https://pypi.org/project/photon-mlir/${version}/)
            - [Documentation](https://github.com/${{ github.repository }}/blob/v${version}/README.md)
            `;
            
            try {
              await github.rest.discussions.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                category_slug: 'announcements'
              });
            } catch (error) {
              console.log('Could not create discussion (maybe discussions are not enabled):', error.message);
            }

  # Notify stakeholders
  notify:
    name: Notify Stakeholders
    runs-on: ubuntu-22.04
    needs: [validate-release, post-release]
    if: always() && needs.post-release.result != 'failure'
    timeout-minutes: 5
    
    steps:
      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate-release.outputs.is_prerelease }}"
          
          if [[ "$IS_PRERELEASE" == "true" ]]; then
            EMOJI="🧪"
            TYPE="Pre-release"
          else
            EMOJI="🚀"
            TYPE="Release"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"$EMOJI $TYPE v$VERSION is now available!\",
              \"attachments\": [{
                \"color\": \"good\",
                \"fields\": [{
                  \"title\": \"Version\",
                  \"value\": \"v$VERSION\",
                  \"short\": true
                }, {
                  \"title\": \"Type\",
                  \"value\": \"$TYPE\",
                  \"short\": true
                }],
                \"actions\": [{
                  \"type\": \"button\",
                  \"text\": \"View Release\",
                  \"url\": \"https://github.com/${{ github.repository }}/releases/tag/v$VERSION\"
                }, {
                  \"type\": \"button\",
                  \"text\": \"PyPI Package\",
                  \"url\": \"https://pypi.org/project/photon-mlir/$VERSION/\"
                }]
              }]
            }" \
            $SLACK_WEBHOOK_URL