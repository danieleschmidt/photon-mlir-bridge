# Autonomous Quantum-Photonic System - Production Deployment
# Enterprise-grade Kubernetes deployment with auto-scaling and monitoring

apiVersion: v1
kind: Namespace
metadata:
  name: autonomous-quantum-photonic
  labels:
    app.kubernetes.io/name: autonomous-quantum-photonic
    app.kubernetes.io/version: "3.0.0"
    terragon.dev/sdlc-generation: "complete"

---
# ConfigMap for autonomous system configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: autonomous-config
  namespace: autonomous-quantum-photonic
data:
  execution-config.yaml: |
    execution_mode: production
    max_concurrent_tasks: 32
    task_timeout_seconds: 300.0
    health_check_interval_seconds: 30.0
    enabled_capabilities:
      - self_optimization
      - thermal_management
      - error_recovery
      - resource_scaling
      - performance_tuning
      - security_monitoring
    
  quantum-config.yaml: |
    quantum_enabled: true
    max_qubits: 16
    coherence_time_ns: 1000.0
    gate_fidelity: 0.999
    measurement_fidelity: 0.995
    quantum_error_correction: true
    wdm_channels: 8
    channel_spacing_ghz: 50.0
    max_optical_power_mw: 100.0
    thermal_limit_celsius: 85.0
    
  security-config.yaml: |
    security_level: high
    enable_qkd: true
    quantum_rng_enabled: true
    quantum_key_length_bits: 256
    quantum_error_correction: true
    enable_post_quantum_crypto: true
    
  optimization-config.yaml: |
    primary_objective: balanced_performance
    cache_strategy: hybrid_multilevel
    scaling_mode: ml_optimized
    min_workers: 4
    max_workers: 64
    enable_ml_optimization: true
    
  validation-config.yaml: |
    validation_level: comprehensive
    continuous_validation: true
    validation_interval_seconds: 300.0
    auto_correction_enabled: true
    regression_detection_enabled: true

---
# Secret for quantum keys and certificates
apiVersion: v1
kind: Secret
metadata:
  name: quantum-secrets
  namespace: autonomous-quantum-photonic
type: Opaque
data:
  quantum-master-key: UXVhbnR1bVNlY3VyZUtleTIwMjU=  # Base64 encoded
  tls-cert: LS0tLS1CRUdJTi...  # TLS certificate
  tls-key: LS0tLS1CRUdJTi...   # TLS private key
  redis-password: QXV0b25vbW91c1JlZGlz  # Redis password

---
# Deployment for Autonomous Quantum Execution Engine
apiVersion: apps/v1
kind: Deployment
metadata:
  name: autonomous-execution-engine
  namespace: autonomous-quantum-photonic
  labels:
    app: autonomous-execution-engine
    component: core
    tier: execution
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: autonomous-execution-engine
  template:
    metadata:
      labels:
        app: autonomous-execution-engine
        component: core
        tier: execution
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: execution-engine
        image: terragon/autonomous-quantum-photonic:v3.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8443
          name: https
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: EXECUTION_MODE
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: PYTHONPATH
          value: "/app/python"
        - name: QUANTUM_MASTER_KEY
          valueFrom:
            secretKeyRef:
              name: quantum-secrets
              key: quantum-master-key
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: quantum-secrets
              key: redis-password
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: quantum-secrets-volume
          mountPath: /app/secrets
          readOnly: true
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
      volumes:
      - name: config-volume
        configMap:
          name: autonomous-config
      - name: quantum-secrets-volume
        secret:
          secretName: quantum-secrets
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000

---
# Deployment for Security Framework
apiVersion: apps/v1
kind: Deployment
metadata:
  name: security-framework
  namespace: autonomous-quantum-photonic
  labels:
    app: security-framework
    component: security
    tier: middleware
spec:
  replicas: 2
  selector:
    matchLabels:
      app: security-framework
  template:
    metadata:
      labels:
        app: security-framework
        component: security
        tier: middleware
    spec:
      containers:
      - name: security-framework
        image: terragon/autonomous-quantum-photonic:v3.0.0
        imagePullPolicy: Always
        command: ["python3", "-m", "photon_mlir.autonomous_security_framework"]
        ports:
        - containerPort: 8081
          name: http
        env:
        - name: SECURITY_LEVEL
          value: "high"
        - name: ENABLE_QKD
          value: "true"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: quantum-secrets-volume
          mountPath: /app/secrets
          readOnly: true
      volumes:
      - name: config-volume
        configMap:
          name: autonomous-config
      - name: quantum-secrets-volume
        secret:
          secretName: quantum-secrets

---
# Deployment for Performance Optimizer
apiVersion: apps/v1
kind: Deployment
metadata:
  name: performance-optimizer
  namespace: autonomous-quantum-photonic
  labels:
    app: performance-optimizer
    component: optimization
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: performance-optimizer
  template:
    metadata:
      labels:
        app: performance-optimizer
        component: optimization
        tier: backend
    spec:
      containers:
      - name: performance-optimizer
        image: terragon/autonomous-quantum-photonic:v3.0.0
        imagePullPolicy: Always
        command: ["python3", "-m", "photon_mlir.autonomous_performance_optimizer"]
        ports:
        - containerPort: 8082
          name: http
        env:
        - name: OPTIMIZATION_OBJECTIVE
          value: "balanced_performance"
        - name: ENABLE_ML_OPTIMIZATION
          value: "true"
        - name: CACHE_STRATEGY
          value: "hybrid_multilevel"
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config

---
# Deployment for Validation Suite
apiVersion: apps/v1
kind: Deployment
metadata:
  name: validation-suite
  namespace: autonomous-quantum-photonic
  labels:
    app: validation-suite
    component: validation
    tier: quality
spec:
  replicas: 1
  selector:
    matchLabels:
      app: validation-suite
  template:
    metadata:
      labels:
        app: validation-suite
        component: validation
        tier: quality
    spec:
      containers:
      - name: validation-suite
        image: terragon/autonomous-quantum-photonic:v3.0.0
        imagePullPolicy: Always
        command: ["python3", "-m", "photon_mlir.autonomous_validation_suite"]
        ports:
        - containerPort: 8083
          name: http
        env:
        - name: VALIDATION_LEVEL
          value: "comprehensive"
        - name: CONTINUOUS_VALIDATION
          value: "true"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config

---
# Redis for distributed caching
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: autonomous-quantum-photonic
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: quantum-secrets
              key: redis-password
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --maxmemory
        - 1gb
        - --maxmemory-policy
        - allkeys-lru
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: autonomous-execution-engine-service
  namespace: autonomous-quantum-photonic
  labels:
    app: autonomous-execution-engine
spec:
  selector:
    app: autonomous-execution-engine
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: https
    port: 443
    targetPort: 8443
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: security-framework-service
  namespace: autonomous-quantum-photonic
spec:
  selector:
    app: security-framework
  ports:
  - port: 80
    targetPort: 8081
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: performance-optimizer-service
  namespace: autonomous-quantum-photonic
spec:
  selector:
    app: performance-optimizer
  ports:
  - port: 80
    targetPort: 8082
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: validation-suite-service
  namespace: autonomous-quantum-photonic
spec:
  selector:
    app: validation-suite
  ports:
  - port: 80
    targetPort: 8083
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: autonomous-quantum-photonic
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
  type: ClusterIP

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: autonomous-quantum-ingress
  namespace: autonomous-quantum-photonic
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - quantum.terragon.dev
    secretName: quantum-tls-secret
  rules:
  - host: quantum.terragon.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: autonomous-execution-engine-service
            port:
              number: 80
      - path: /security
        pathType: Prefix
        backend:
          service:
            name: security-framework-service
            port:
              number: 80
      - path: /optimizer
        pathType: Prefix
        backend:
          service:
            name: performance-optimizer-service
            port:
              number: 80
      - path: /validation
        pathType: Prefix
        backend:
          service:
            name: validation-suite-service
            port:
              number: 80

---
# Horizontal Pod Autoscaler for execution engine
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: execution-engine-hpa
  namespace: autonomous-quantum-photonic
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: autonomous-execution-engine
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: quantum_coherence
      target:
        type: AverageValue
        averageValue: "990m"  # 0.99 quantum coherence minimum
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: autonomous-quantum-netpol
  namespace: autonomous-quantum-photonic
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
    - protocol: TCP
      port: 8082
    - protocol: TCP
      port: 8083
  - from:
    - podSelector:
        matchLabels:
          app: autonomous-execution-engine
    - podSelector:
        matchLabels:
          app: security-framework
    - podSelector:
        matchLabels:
          app: performance-optimizer
    - podSelector:
        matchLabels:
          app: validation-suite
    ports:
    - protocol: TCP
      port: 6379  # Redis
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 6379 # Redis

---
# ServiceMonitor for Prometheus monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: autonomous-quantum-monitor
  namespace: autonomous-quantum-photonic
  labels:
    app: autonomous-quantum-photonic
spec:
  selector:
    matchLabels:
      app: autonomous-execution-engine
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    honorLabels: true

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: execution-engine-pdb
  namespace: autonomous-quantum-photonic
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: autonomous-execution-engine

---
# RBAC for service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: autonomous-quantum-sa
  namespace: autonomous-quantum-photonic

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: autonomous-quantum-role
  namespace: autonomous-quantum-photonic
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: autonomous-quantum-rolebinding
  namespace: autonomous-quantum-photonic
subjects:
- kind: ServiceAccount
  name: autonomous-quantum-sa
  namespace: autonomous-quantum-photonic
roleRef:
  kind: Role
  name: autonomous-quantum-role
  apiGroup: rbac.authorization.k8s.io