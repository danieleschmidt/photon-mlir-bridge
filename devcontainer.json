{
  "name": "Photon MLIR Bridge Development",
  "dockerComposeFile": ["docker-compose.yml"],
  "service": "dev",
  "workspaceFolder": "/workspace",
  "shutdownAction": "stopCompose",
  
  // VS Code specific settings
  "customizations": {
    "vscode": {
      "settings": {
        // Editor settings
        "editor.tabSize": 2,
        "editor.insertSpaces": true,
        "editor.rulers": [80, 100],
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
          "source.organizeImports": true,
          "source.fixAll": true
        },
        "files.trimTrailingWhitespace": true,
        "files.insertFinalNewline": true,
        "files.trimFinalNewlines": true,
        
        // C++ settings
        "C_Cpp.default.cppStandard": "c++20",
        "C_Cpp.default.cStandard": "c17",
        "C_Cpp.default.compilerPath": "/usr/bin/clang++-17",
        "C_Cpp.default.includePath": [
          "/workspace/include",
          "/usr/include/llvm-17",
          "/usr/include/mlir-17"
        ],
        "C_Cpp.default.defines": [
          "LLVM_VERSION_MAJOR=17",
          "MLIR_VERSION_MAJOR=17"
        ],
        "C_Cpp.clang_format_path": "/usr/bin/clang-format-17",
        "C_Cpp.codeAnalysis.clangTidy.enabled": true,
        "C_Cpp.codeAnalysis.clangTidy.path": "/usr/bin/clang-tidy-17",
        "C_Cpp.codeAnalysis.clangTidy.config": "",
        "C_Cpp.intelliSenseEngine": "default",
        
        // Python settings
        "python.analysis.typeCheckingMode": "strict",
        "python.linting.enabled": true,
        "python.linting.pylintEnabled": false,
        "python.linting.flake8Enabled": true,
        "python.linting.mypyEnabled": true,
        "python.formatting.provider": "black",
        "python.formatting.blackArgs": ["--line-length=88"],
        "python.sortImports.args": ["--profile", "black"],
        "python.defaultInterpreterPath": "/usr/bin/python3.11",
        
        // File associations
        "files.associations": {
          "*.td": "tablegen",
          "*.mlir": "mlir",
          "*.phdl": "verilog",
          "*.pasm": "assembly"
        },
        
        // Git settings
        "git.enableSmartCommit": true,
        "git.confirmSync": false,
        "git.autofetch": true,
        
        // Terminal settings
        "terminal.integrated.defaultProfile.linux": "bash",
        "terminal.integrated.shell.linux": "/bin/bash",
        
        // Search settings
        "search.exclude": {
          "**/build": true,
          "**/dist": true,
          "**/.eggs": true,
          "**/__pycache__": true,
          "**/.git": true,
          "**/node_modules": true,
          "**/.mypy_cache": true,
          "**/.pytest_cache": true
        },
        
        // CMake settings
        "cmake.buildDirectory": "${workspaceFolder}/build",
        "cmake.generator": "Ninja",
        "cmake.configureArgs": [
          "-DCMAKE_BUILD_TYPE=Debug",
          "-DCMAKE_C_COMPILER=clang-17",
          "-DCMAKE_CXX_COMPILER=clang++-17",
          "-DPHOTON_ENABLE_TESTS=ON",
          "-DPHOTON_ENABLE_PYTHON=ON"
        ],
        
        // Test settings
        "python.testing.pytestEnabled": true,
        "python.testing.pytestArgs": [
          "tests/python"
        ],
        "python.testing.unittestEnabled": false,
        "testMate.cpp.test.advancedExecutables": [
          {
            "pattern": "build/tests/test_*",
            "cwd": "${workspaceFolder}/build/tests"
          }
        ],
        
        // Intellisense and navigation
        "C_Cpp.errorSquiggles": "Enabled",
        "C_Cpp.autocomplete": "Default",
        "C_Cpp.suggestSnippets": true,
        
        // Formatting
        "editor.defaultFormatter": null,
        "[cpp]": {
          "editor.defaultFormatter": "ms-vscode.cpptools"
        },
        "[c]": {
          "editor.defaultFormatter": "ms-vscode.cpptools"
        },
        "[python]": {
          "editor.defaultFormatter": "ms-python.black-formatter"
        },
        "[json]": {
          "editor.defaultFormatter": "esbenp.prettier-vscode"
        },
        "[yaml]": {
          "editor.defaultFormatter": "esbenp.prettier-vscode"
        },
        "[markdown]": {
          "editor.defaultFormatter": "esbenp.prettier-vscode"
        }
      },
      
      // Extensions
      "extensions": [
        // C++ Development
        "ms-vscode.cpptools",
        "ms-vscode.cpptools-extension-pack",
        "ms-vscode.cmake-tools",
        "twxs.cmake",
        "ms-vscode.makefile-tools",
        
        // Python Development
        "ms-python.python",
        "ms-python.black-formatter",
        "ms-python.isort",
        "ms-python.flake8",
        "ms-python.mypy-type-checker",
        "ms-python.pylint",
        
        // Testing
        "matepek.vscode-catch2-test-adapter",
        "ms-python.pytest",
        
        // LLVM/MLIR Support
        "llvm-vs-code-extensions.vscode-mlir",
        "llvm-vs-code-extensions.vscode-tablegen",
        
        // General Development
        "ms-vscode.vscode-json",
        "redhat.vscode-yaml",
        "ms-vscode.vscode-typescript-next",
        "esbenp.prettier-vscode",
        
        // Git and Version Control
        "eamodio.gitlens",
        "mhutchie.git-graph",
        "donjayamanne.githistory",
        
        // Documentation
        "yzhang.markdown-all-in-one",
        "davidanson.vscode-markdownlint",
        "bierner.docs-view",
        
        // Docker and Containers
        "ms-azuretools.vscode-docker",
        "ms-vscode-remote.remote-containers",
        
        // Productivity
        "ms-vscode.vscode-todo-highlight",
        "gruntfuggly.todo-tree",
        "streetsidesoftware.code-spell-checker",
        "ms-vsliveshare.vsliveshare",
        
        // Debugging
        "vadimcn.vscode-lldb",
        "ms-vscode.cpptools-themes",
        
        // Performance and Profiling
        "intel-corporation.intel-oneapi-analysis-configurator",
        
        // Security
        "ms-vscode.vscode-github-issue-notebooks",
        "github.vscode-github-actions"
      ]
    }
  },
  
  // Features to install
  "features": {
    "ghcr.io/devcontainers/features/common-utils:2": {
      "installZsh": true,
      "installOhMyZsh": true,
      "upgradePackages": true
    },
    "ghcr.io/devcontainers/features/git:1": {
      "version": "latest",
      "ppa": true
    },
    "ghcr.io/devcontainers/features/github-cli:1": {
      "version": "latest"
    },
    "ghcr.io/devcontainers/features/docker-in-docker:2": {
      "version": "latest",
      "moby": true
    },
    "ghcr.io/devcontainers/features/node:1": {
      "version": "lts"
    }
  },
  
  // Ports to forward
  "forwardPorts": [
    8080,  // Debug server
    8000,  // Documentation
    8501,  // Dashboard
    8888,  // Jupyter
    3000,  // Grafana
    9090   // Prometheus
  ],
  
  // Port attributes
  "portsAttributes": {
    "8080": {
      "label": "Debug Server",
      "onAutoForward": "notify"
    },
    "8000": {
      "label": "Documentation",
      "onAutoForward": "openBrowser"
    },
    "8501": {
      "label": "Dashboard",
      "onAutoForward": "notify"
    },
    "8888": {
      "label": "Jupyter",
      "onAutoForward": "ignore"
    },
    "3000": {
      "label": "Grafana",
      "onAutoForward": "ignore"
    },
    "9090": {
      "label": "Prometheus",
      "onAutoForward": "ignore"
    }
  },
  
  // Post-creation commands
  "postCreateCommand": [
    "bash",
    "-c",
    "echo 'Setting up development environment...' && pre-commit install --install-hooks && echo 'Development environment ready!'"
  ],
  
  // Commands to run on container start
  "postStartCommand": [
    "bash",
    "-c",
    "echo 'Container started. Run cmake --build build to build the project.'"
  ],
  
  // Container user
  "remoteUser": "developer",
  
  // Environment variables
  "containerEnv": {
    "PHOTON_DEV_MODE": "1",
    "PHOTON_LOG_LEVEL": "DEBUG",
    "CC": "clang-17",
    "CXX": "clang++-17",
    "PYTHONPATH": "/workspace/python",
    "CMAKE_BUILD_PARALLEL_LEVEL": "4"
  },
  
  // Mounts
  "mounts": [
    // Cache mounts for better performance
    "source=photon-mlir-cache,target=/home/developer/.cache,type=volume",
    "source=photon-mlir-local,target=/home/developer/.local,type=volume",
    
    // SSH and Git configuration
    "source=${localEnv:HOME}/.ssh,target=/home/developer/.ssh,type=bind,consistency=cached,readonly",
    "source=${localEnv:HOME}/.gitconfig,target=/home/developer/.gitconfig,type=bind,consistency=cached,readonly"
  ],
  
  // Initialization options
  "initializeCommand": [
    "bash",
    "-c",
    "echo 'Initializing photon-mlir-bridge development container...'"
  ],
  
  // Update content command
  "updateContentCommand": [
    "bash",
    "-c",
    "pip install --user -e '.[dev,test,docs]' && pre-commit autoupdate"
  ],
  
  // Wait for
  "waitFor": "postCreateCommand",
  
  // Override command
  "overrideCommand": false,
  
  // Run arguments for Docker
  "runArgs": [
    "--init",
    "--privileged",
    "--security-opt", "seccomp=unconfined",
    "--security-opt", "apparmor=unconfined"
  ],
  
  // Additional capabilities
  "capAdd": [
    "SYS_PTRACE"
  ],
  
  // Host requirements
  "hostRequirements": {
    "cpus": 4,
    "memory": "8gb",
    "storage": "32gb"
  }
}