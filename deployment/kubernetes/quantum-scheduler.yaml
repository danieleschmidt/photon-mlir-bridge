# Kubernetes deployment for Quantum-Inspired Task Scheduler
# Production-ready configuration with high availability, monitoring, and security

apiVersion: v1
kind: Namespace
metadata:
  name: quantum-scheduler
  labels:
    app.kubernetes.io/name: quantum-scheduler
    app.kubernetes.io/version: "0.1.0"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: quantum-scheduler-config
  namespace: quantum-scheduler
  labels:
    app.kubernetes.io/name: quantum-scheduler
    app.kubernetes.io/component: config
data:
  production.json: |
    {
      "quantum_scheduler": {
        "optimization_level": "balanced",
        "cache_strategy": "hybrid",
        "max_workers": 8,
        "enable_validation": true,
        "enable_monitoring": true
      },
      "server": {
        "host": "0.0.0.0",
        "port": 8080,
        "workers": 4,
        "timeout": 300
      },
      "logging": {
        "level": "INFO",
        "format": "json"
      },
      "security": {
        "rate_limiting": {
          "enabled": true,
          "requests_per_minute": 60
        },
        "input_validation": {
          "validation_level": "strict"
        }
      },
      "monitoring": {
        "enabled": true,
        "metrics_endpoint": "/metrics",
        "health_endpoint": "/health"
      }
    }

---
apiVersion: v1
kind: Secret
metadata:
  name: quantum-scheduler-secrets
  namespace: quantum-scheduler
  labels:
    app.kubernetes.io/name: quantum-scheduler
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Base64 encoded secrets (replace with actual values)
  api-key: cXVhbnR1bS1zY2hlZHVsZXItc2VjcmV0LWtleQ==  # quantum-scheduler-secret-key

---
apiVersion: v1
kind: Service
metadata:
  name: quantum-scheduler-service
  namespace: quantum-scheduler
  labels:
    app.kubernetes.io/name: quantum-scheduler
    app.kubernetes.io/component: service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: quantum-scheduler
    app.kubernetes.io/component: api

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quantum-scheduler-api
  namespace: quantum-scheduler
  labels:
    app.kubernetes.io/name: quantum-scheduler
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "0.1.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: quantum-scheduler
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: quantum-scheduler
        app.kubernetes.io/component: api
        app.kubernetes.io/version: "0.1.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      
      serviceAccountName: quantum-scheduler-sa
      
      initContainers:
        - name: config-validator
          image: quantum-scheduler:0.1.0
          imagePullPolicy: IfNotPresent
          command: ["/usr/local/bin/entrypoint.sh", "version"]
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop: ["ALL"]
      
      containers:
        - name: quantum-scheduler
          image: quantum-scheduler:0.1.0
          imagePullPolicy: IfNotPresent
          
          command: ["/usr/local/bin/entrypoint.sh", "server"]
          
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          
          env:
            - name: QUANTUM_CONFIG_PATH
              value: "/app/config/production.json"
            - name: QUANTUM_LOG_LEVEL
              value: "INFO"
            - name: QUANTUM_PORT
              value: "8080"
            - name: QUANTUM_WORKERS
              value: "4"
            - name: QUANTUM_CACHE_DIR
              value: "/app/cache"
            - name: QUANTUM_LOG_DIR
              value: "/app/logs"
            - name: QUANTUM_DATA_DIR
              value: "/app/data"
            - name: QUANTUM_ENABLE_MONITORING
              value: "true"
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          
          envFrom:
            - secretRef:
                name: quantum-scheduler-secrets
          
          volumeMounts:
            - name: config
              mountPath: /app/config
              readOnly: true
            - name: cache
              mountPath: /app/cache
            - name: logs
              mountPath: /app/logs
            - name: data
              mountPath: /app/data
            - name: tmp
              mountPath: /tmp
          
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
              ephemeral-storage: 1Gi
            limits:
              cpu: 2000m
              memory: 2Gi
              ephemeral-storage: 4Gi
          
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop: ["ALL"]
          
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          
          startupProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
      
      volumes:
        - name: config
          configMap:
            name: quantum-scheduler-config
            defaultMode: 0644
        - name: cache
          emptyDir:
            sizeLimit: 2Gi
        - name: logs
          emptyDir:
            sizeLimit: 1Gi
        - name: data
          emptyDir:
            sizeLimit: 1Gi
        - name: tmp
          emptyDir:
            sizeLimit: 500Mi
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values: ["quantum-scheduler"]
                    - key: app.kubernetes.io/component
                      operator: In
                      values: ["api"]
                topologyKey: kubernetes.io/hostname
      
      tolerations:
        - key: "node.kubernetes.io/memory-pressure"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node.kubernetes.io/disk-pressure"
          operator: "Exists"
          effect: "NoSchedule"
      
      nodeSelector:
        kubernetes.io/os: linux
      
      terminationGracePeriodSeconds: 30
      
      restartPolicy: Always

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: quantum-scheduler-sa
  namespace: quantum-scheduler
  labels:
    app.kubernetes.io/name: quantum-scheduler
    app.kubernetes.io/component: service-account
automountServiceAccountToken: false

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: quantum-scheduler-role
  namespace: quantum-scheduler
  labels:
    app.kubernetes.io/name: quantum-scheduler
    app.kubernetes.io/component: rbac
rules:
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: quantum-scheduler-rolebinding
  namespace: quantum-scheduler
  labels:
    app.kubernetes.io/name: quantum-scheduler
    app.kubernetes.io/component: rbac
subjects:
  - kind: ServiceAccount
    name: quantum-scheduler-sa
    namespace: quantum-scheduler
roleRef:
  kind: Role
  name: quantum-scheduler-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: quantum-scheduler-hpa
  namespace: quantum-scheduler
  labels:
    app.kubernetes.io/name: quantum-scheduler
    app.kubernetes.io/component: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: quantum-scheduler-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: quantum-scheduler-pdb
  namespace: quantum-scheduler
  labels:
    app.kubernetes.io/name: quantum-scheduler
    app.kubernetes.io/component: availability
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: quantum-scheduler
      app.kubernetes.io/component: api

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: quantum-scheduler-netpol
  namespace: quantum-scheduler
  labels:
    app.kubernetes.io/name: quantum-scheduler
    app.kubernetes.io/component: security
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: quantum-scheduler
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8080
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    - to: []
      ports:
        - protocol: TCP
          port: 443
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: TCP
          port: 443

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: quantum-scheduler-metrics
  namespace: quantum-scheduler
  labels:
    app.kubernetes.io/name: quantum-scheduler
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: quantum-scheduler
      app.kubernetes.io/component: service
  endpoints:
    - port: metrics
      path: /metrics
      interval: 30s
      scrapeTimeout: 10s

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: quantum-scheduler-ingress
  namespace: quantum-scheduler
  labels:
    app.kubernetes.io/name: quantum-scheduler
    app.kubernetes.io/component: ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300" 
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
    - hosts:
        - quantum-scheduler.example.com
      secretName: quantum-scheduler-tls
  rules:
    - host: quantum-scheduler.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: quantum-scheduler-service
                port:
                  number: 80