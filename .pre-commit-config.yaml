# pre-commit configuration for photon-mlir-bridge
# Install with: pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # =============================================================================
  # General code quality and formatting
  # =============================================================================
  
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: '\.md$'
      - id: end-of-file-fixer
      - id: check-yaml
        args: ['--allow-multiple-documents']
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: detect-private-key
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: ['--fix=lf']
      - id: no-commit-to-branch
        args: ['--branch', 'main', '--branch', 'master']

  # =============================================================================
  # Python code formatting and linting
  # =============================================================================
  
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3.11
        args: ['--line-length=88']

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ['--profile', 'black', '--line-length=88']

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: ['--max-line-length=88', '--extend-ignore=E203,W503']
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-implicit-str-concat

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies:
          - types-requests
          - types-PyYAML
          - numpy
          - torch
        args: ['--ignore-missing-imports', '--strict']

  # =============================================================================
  # C/C++ formatting and linting
  # =============================================================================
  
  - repo: local
    hooks:
      - id: clang-format
        name: clang-format
        entry: clang-format-17
        language: system
        files: \.(c|cc|cxx|cpp|h|hpp|hxx)$
        args: ['-i', '-style=file']

  - repo: local
    hooks:
      - id: clang-tidy
        name: clang-tidy
        entry: bash -c 'find . -name "*.cpp" -o -name "*.cc" -o -name "*.cxx" | head -10 | xargs clang-tidy-17 --config-file=.clang-tidy'
        language: system
        files: \.(cpp|cc|cxx)$
        pass_filenames: false

  # =============================================================================
  # CMake formatting
  # =============================================================================
  
  - repo: https://github.com/cheshirekow/cmake-format-precommit
    rev: v0.6.13
    hooks:
      - id: cmake-format
        args: ['--in-place']
      - id: cmake-lint

  # =============================================================================
  # Documentation and markup
  # =============================================================================
  
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        args: ['--fix']
        exclude: 'CHANGELOG.md'

  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        args: ['--config-file=.yamllint.yml']

  # =============================================================================
  # Security scanning
  # =============================================================================
  
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: \.env\.example$

  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ['-r', 'python/', '-f', 'json', '-o', 'bandit-report.json']
        files: \.py$

  # =============================================================================
  # License and legal compliance
  # =============================================================================
  
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.4
    hooks:
      - id: insert-license
        files: \.(cpp|cc|cxx|h|hpp|hxx)$
        args:
          - --license-filepath
          - .license-header.txt
          - --comment-style
          - //

      - id: insert-license
        files: \.py$
        args:
          - --license-filepath
          - .license-header.txt
          - --comment-style
          - '#'

  # =============================================================================
  # Custom project-specific hooks
  # =============================================================================
  
  - repo: local
    hooks:
      - id: check-photonic-syntax
        name: Check photonic assembly syntax
        entry: python3 scripts/check_photonic_syntax.py
        language: system
        files: \.(pasm|phdl)$
        pass_filenames: true

  - repo: local
    hooks:
      - id: validate-mlir
        name: Validate MLIR files
        entry: bash -c 'for file in "$@"; do mlir-opt-17 --verify-diagnostics "$file" > /dev/null; done'
        language: system
        files: \.mlir$
        pass_filenames: true

  - repo: local
    hooks:
      - id: check-build
        name: Check that project builds
        entry: bash -c 'if [ -d build ]; then cmake --build build --target check-syntax; fi'
        language: system
        files: \.(cpp|cc|cxx|h|hpp|hxx|cmake|txt)$
        pass_filenames: false

  - repo: local
    hooks:
      - id: update-changelog
        name: Update changelog
        entry: python3 scripts/update_changelog.py
        language: system
        files: ^(src/|python/|include/).*\.(cpp|cc|cxx|h|hpp|hxx|py)$
        pass_filenames: false

  # =============================================================================
  # Performance and optimization checks
  # =============================================================================
  
  - repo: local
    hooks:
      - id: check-performance-regressions
        name: Check for performance regressions
        entry: python3 scripts/check_performance.py
        language: system
        files: ^(src/|python/|include/).*\.(cpp|cc|cxx|h|hpp|hxx|py)$
        pass_filenames: false
        stages: [manual]

# =============================================================================
# Global configuration
# =============================================================================

default_language_version:
  python: python3.11

ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: 'main'
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [clang-tidy, check-build, check-performance-regressions]
  submodules: false